package com.anykey.balala.activity;import android.content.Intent;import android.os.Bundle;import android.view.View;import android.widget.Button;import com.android.volley.Request;import com.android.volley.VolleyError;import com.anykey.balala.AppBalala;import com.anykey.balala.CommonUrlConfig;import com.anykey.balala.R;import com.anykey.balala.Utils.GpsTracker;import com.anykey.balala.model.CommonListResult;import com.anykey.balala.model.CommonModel;import com.anykey.balala.model.TokenInfo;import com.facebook.AccessToken;import com.facebook.CallbackManager;import com.facebook.FacebookCallback;import com.facebook.FacebookException;import com.facebook.FacebookSdk;import com.facebook.GraphRequest;import com.facebook.GraphResponse;import com.facebook.HttpMethod;import com.facebook.Profile;import com.facebook.ProfileTracker;import com.facebook.appevents.AppEventsLogger;import com.facebook.login.LoginManager;import com.facebook.login.LoginResult;import com.facebook.login.widget.ProfilePictureView;import com.google.gson.reflect.TypeToken;import net.dev.mylib.DebugLogs;import net.dev.mylib.JsonUtil;import net.dev.mylib.ToastUtils;import net.dev.mylib.cache.sharedPreferences.SharedPreferencesUtil;import net.dev.mylib.netWorkUtil.GetJson;import java.util.HashMap;import java.util.Map;/** * Created by xujian on 15/8/26. * 登陆界面 */public class LoginActivity extends BaseActivity {    private CallbackManager callbackManager;    private ProfileTracker profileTracker;    private Button btn_NewUser ;    private Button btn_EmailRegister;    private ProfilePictureView profilePictureView;//facebook图片控件    private SharedPreferencesUtil sp = SharedPreferencesUtil.getInstance(mContext);    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        callbackManager = CallbackManager.Factory.create();//创建回调工厂        //登陆成功以后回调        LoginManager.getInstance().registerCallback(callbackManager,                new FacebookCallback<LoginResult>() {                    @Override                    public void onSuccess(LoginResult loginResult) {                        updateUI();                    }                    @Override                    public void onCancel() {                    }                    @Override                    public void onError(FacebookException exception) {                        DebugLogs.e("-----onError----->" + exception);                    }                });        setContentView(R.layout.activity_login);        profilePictureView = (ProfilePictureView)findViewById(R.id.profilePicture);        //刷新获取个人用户资料        profileTracker = new ProfileTracker() {            @Override            protected void onCurrentProfileChanged(Profile oldProfile, Profile currentProfile) {                updateUI();                //It`s possible that we were waiting for Profile to be populated in order to post a status update.            }        };        btn_NewUser = (Button) findViewById(R.id.btn_NewUser);        btn_NewUser.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Intent newUserIntent = new Intent(LoginActivity.this,NewUserActivity.class);                startActivity(newUserIntent);            }        });        btn_EmailRegister = (Button)findViewById(R.id.btn_email_register);        btn_EmailRegister.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Intent newUserIntent = new Intent(LoginActivity.this,EmailRegister.class);                startActivity(newUserIntent);            }        });    }    /**     * Ui界面刷新     */    private void updateUI(){        boolean enableButton = AccessToken.getCurrentAccessToken() != null;        Profile profile = Profile.getCurrentProfile();//获取登陆成功以后的数据        if (enableButton && profile != null) {            Response(profile);            getFriendsList();        } else {            DebugLogs.e("获取信息失败");        }    }    /**     * 获取返回结果并且保存用户信息     */    private void Response(final Profile profiles) {        Map<String,String> params = new HashMap<String,String>();        params.put("sid",  profiles.getId());        params.put("Deviceid", AppBalala.getDeviceId);        params.put("Source","2");        GetJson.Callback callback = new GetJson.Callback() {            @Override            public void onFinish(String response) {                DebugLogs.e("获取返回结果"+response);                if (response != null){                    CommonListResult<TokenInfo> results = JsonUtil.fromJson(response, new TypeToken<CommonListResult<TokenInfo>>() {                    }.getType());                    if (results.code.equals(CommonUrlConfig.RequestState.OK )){//                        profilePictureView.setProfileId(profiles.getId());//facebook头像显示                        String token = results.data.get(0).Token;                        String userid = results.data.get(0).Userid;                        sp.saveLoginInfo(true,token,userid);                        AppBalala.Uid = userid;                        AppBalala.Utoken = token;                        AppBalala.getInstance().setLogined(true);                        Intent intent = new Intent(LoginActivity.this , MainActivity.class);                        startActivity(intent);                        finish();                    }else{                        ToastUtils.showToast(mContext,results.message);                    }                }            }            @Override            public void onError(VolleyError error) {                //处理错误            }        };        GetJson getJson = new GetJson(this,callback,true,getString(R.string.loading));        getJson.setConnection(Request.Method.GET, CommonUrlConfig.facebookRegister,params);    }    /**     * 获取朋友列表     */    private void getFriendsList() {    /* make the API call */        new GraphRequest(                AccessToken.getCurrentAccessToken(),                "/me/friends",                null,                HttpMethod.GET,                new GraphRequest.Callback() {                    public void onCompleted(GraphResponse response) {                        /* handle the result */                        DebugLogs.e("--result-response---->" + response);                    }                }        ).executeAsync();    }    //接受回调    @Override    protected void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode, resultCode, data);        callbackManager.onActivityResult(requestCode, resultCode, data);    }    @Override    protected void onResume() {        super.onResume();        // Logs 'install' and 'app activate' App Events.        AppEventsLogger.activateApp(this);    }    @Override    protected void onPause() {        super.onPause();        // Logs 'app deactivate' App Event.        AppEventsLogger.deactivateApp(this);    }    @Override    protected void onDestroy() {        super.onDestroy();        profileTracker.stopTracking();    }}